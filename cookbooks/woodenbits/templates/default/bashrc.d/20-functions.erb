function tc-mount {
  VAULT="$1"
  shift

  if [[ $VAULT == "" ]]; then
    echo "No vault name provided"
    return
  fi

  VAULT_PATH=$HOME/vaults/$VAULT.tc

  if [ ! -f $VAULT_PATH ]; then
    echo "Vault $VAULT_PATH not found!"
    return
  fi

  MOUNT_PATH=/vaults/$VAULT

  if [ ! -d $MOUNT_PATH ]; then
    echo "Vault mount point $MOUNT_PATH not found, creating it!"
    sudo mkdir $MOUNT_PATH
  fi

  truecrypt \
    --text --keyfiles='' --fs-options="uid=$UID,umask=077" --protect-hidden=no $@ \
    ~/vaults/$VAULT.tc /vaults/$VAULT
};

function tc-format {
  VAULT="$1"
  shift

  if [[ $VAULT == "" ]]; then
    echo "No vault name provided"
    return
  fi

  VAULT_PATH=$HOME/vaults/$VAULT.tc

  if [ ! -f $VAULT_PATH ]; then
    echo "Vault $VAULT_PATH not found!"
    return
  fi

  tmount $VAULT --text --filesystem=none || return
  DEVICE=`truecrypt --text --list | grep -e " $VAULT_PATH " | cut -d ' ' -f 3`
  if [[ ! $DEVICE =~ /dev/mapper/truecrypt[[:digit:]]+ ]]; then 
    echo "bad device $DEVICE"
    return
  fi

  LABEL=`echo $VAULT | sed 's/^./\u&/'`
  echo "vault: $VAULT.tc, label: $LABEL, device: $DEVICE"
  sudo bash -c "dd if=/dev/zero of=$DEVICE bs=1k count=100 && \
    mkudffs --media-type=hd --utf8 --lvid $LABEL --vid $VAULT $DEVICE"
  tumount $VAULT
};

function tc-create {
  VAULT="$1"
  shift

  if [[ $VAULT == "" ]]; then
    echo "No vault name provided"
    return
  fi

  VAULT_PATH=$HOME/vaults/$VAULT.tc

  if [ -f $VAULT_PATH ]; then
    echo "Vault $VAULT_PATH already exists!"
    return
  fi

  SIZE="$1"
  shift

  if [[ $SIZE == "" ]]; then
    echo "No vault size provided"
    return
  fi

  let SIZE=$SIZE*1024*1024 # size is in MB

  echo "size: $SIZE"

  truecrypt --text \
  --create \
  --keyfiles="" \
  --volume-type=normal \
  --size=${SIZE} \
  --encryption=AES \
  --hash=RIPEMD-160 \
  --filesystem=none \
  --random-source=/dev/random \
  $VAULT_PATH
};

function tc-umount {
  VAULT="$1"

  if [[ $VAULT == "" ]]; then
    echo "unmounting all truecrypt vaults"
    truecrypt --text --dismount
  else
    VAULT_PATH=$HOME/vaults/$VAULT.tc

    if [ ! -f $VAULT_PATH ]; then
      echo "Vault $VAULT_PATH not found!"
      return
    fi

    # echo "unmounting truecrypt vault '$VAULT'"
    truecrypt --text --dismount $VAULT_PATH
  fi
};

function tc-list { truecrypt --text --list; };

std_excludes='--exclude=*\.log --exclude=*\.class --exclude=*\.jar --exclude=*\.jtl --exclude=*-db-200*'
grep-src() { fgrep "$1" * -r $2 $3 $4 $std_excludes | grep -v '\.svn/'; }

short_dir ()
{
    if [ "$PWD" = "$HOME" ]; then
        echo '~'
    else
        the_dir=`dirname "$PWD"`;
        the_base=`basename "$PWD"`;
        the_dir_base=`basename "$the_dir"`;
        if [ "$the_dir_base" = '/' ]; then
            the_dir_base="";
        fi
        echo "$the_dir_base/$the_base"
    fi

}

function __bundler_ps1 {
  if [ -n "${BUNDLE_GEMFILE-}" ]; then
    project_path="${BUNDLE_GEMFILE%/Gemfile}"
    project_name="${project_path##**/}"

    if [ -n "${1-}" ]; then
      printf "$1" "in ${project_name} bundle"
    else
      printf " (%s)" "in ${project_name} bundle"
    fi
  fi
}

# usage: $repeat 15 echo 'foo'
function repeat {
    n=0
    times=$1
    shift
    while [[ $n -lt $times ]]; do
        $@
        n=$((n+1))
    done
}
