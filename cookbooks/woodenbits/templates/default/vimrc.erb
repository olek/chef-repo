set ff=unix

set backupdir=~/tmp/vi,~/tmp,.
set directory=~/tmp/vi,~/tmp,.

set nocompatible
set autoread
set smartindent
set shiftround
set shiftwidth=2
set tabstop=2
set expandtab
set autowrite
set history=10000
set viminfo='30,f1,:500,\/500
set winheight=100
set equalalways
set textwidth=100
set comments=n:#
set formatoptions=tcoql
set smarttab
set more
set nostartofline
set showmatch
set hlsearch
set laststatus=2
set cmdheight=2

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set backup      " keep a backup file
set ruler       " show the cursor position all the time
set showcmd     " display incomplete commands
set incsearch       " do incremental searching

set nrformats-=octal

" Don't use Ex mode, use Q for formatting
map Q gq

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78

autocmd FileType text set ff=unix

autocmd BufRead,BufNewFile *.haml         set filetype=haml

"autocmd FileType ruby,eruby,yaml,haml,javascript set ai shiftwidth=2 tabstop=2 et


" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g" |
  \ endif

" Usage:  :let ma = Mark() ... execute ma
" has the same effect as  :normal ma ... :normal 'a
" without affecting global marks.
" You can also use Mark(17) to refer to the start of line 17 and Mark(17,34)
" to refer to the 34'th (screen) column of the line 17.  The functions
" Line() and Virtcol() extract the line or (screen) column from a "mark"
" constructed from Mark() and default to line() and virtcol() if they do not
" recognize the pattern.
" Update:  :execute Mark() now restores screen position as well as the cursor.
fun! Mark(...)
  if a:0 == 0
    let mark = line(".") . "G" . virtcol(".") . "|"
    normal! H
    let mark = "normal!" . line(".") . "Gzt" . mark
    execute mark
    return mark
  elseif a:0 == 1
    return "normal!" . a:1 . "G1|"
  else
    return "normal!" . a:1 . "G" . a:2 . "|"
  endif
endfun

" Tries to return the buffer-specific value of a variable; if not
" found, tries to return the global value -- if that's not found
" either, returns an optional default value or -1 if not specified.
function! GetVar(...)
  let varName=a:1
  if (exists("a:2"))
    let retVal=a:2
  else
    let retVal=-1
  endif
  if (exists ("b:" . varName))
    exe "let retVal=b:" . varName
  elseif (exists ("g:" . varName))
    exe "let retVal=g:" . varName
  endif
  return retVal
endfunction

function! StripTrailingSpaces()
  if ( GetVar( "noStripSpaces" ) != 1 )
    let currPos=Mark()
    exec 'v:^--\s*$:s:\s\+$::e'
    exe currPos
  endif
endfunction

" Remove trailing blanks upon saving except from lines containing sigdashes
"au BufWritePre * silent! call StripTrailingSpaces()
au BufWritePre * call StripTrailingSpaces()


set winaltkeys=no
map <M-w> :q<CR>
map <M-s> :w<CR>


"   Edit another file in the same directory as the current file
"   uses expression to extract path from current file's path
"  (thanks Douglas Potts)
if has("unix")
    map <F2> :split <C-R>=expand("%:p:h") . "/" <CR>
    map <S-F2> :edit <C-R>=expand("%:p:h") . "/" <CR>
    map <F3> :edit <C-R>=expand("%:p:h") . "/" <CR>
else
    map <F2> :split <C-R>=expand("%:p:h") . "\" <CR>
    map <S-F2> :edit <C-R>=expand("%:p:h") . "\" <CR>
    map <F3> :edit <C-R>=expand("%:p:h") . "\" <CR>
endif

" use "\f" for returning to edit previous file
map \f <C-^>
