set nocompatible              " be iMproved, required
filetype off                  " required

<%- unless @is_root -%>
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" My Bundles here:
"
" General {{{
Plugin 'tsaleh/vim-align'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
"Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-sleuth' "automatically adjusts 'shiftwidth' and 'expandtab' heuristically based on the current file
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-surround'
"Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-leiningen'
Plugin 'tpope/vim-projectionist' " Projectionist provides granular project configuration using projections
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-abolish'
"Plugin 'guns/vim-clojure-static' "included already, but lets use latest
Plugin 'guns/vim-sexp'
Plugin 'tpope/vim-sexp-mappings-for-regular-people'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'gregspurrier/vim-midje.git' " proper indent/highlight for midje
"Plugin 'scrooloose/nerdcommenter'
"Plugin 'scrooloose/nerdtree'
"Plugin 'scrooloose/vim-space'
"Plugin 'scrooloose/syntastic'
"Plugin 'msanders/snipmate.vim'
"Plugin 'sjl/threesome.vim'
"Plugin 'nelstrom/vim-textobj-rubyblock'
"Plugin 'kana/vim-textobj-user'
"Plugin 'chrismetcalf/vim-yankring'
"Plugin 'michaeljsmith/vim-indent-object'
"Plugin 'mirell/vim-matchit'
"Plugin 'ecomba/vim-ruby-refactoring'
"Plugin 'kchmck/vim-coffee-script'
"Plugin 'Lokaltog/vim-powerline'
Plugin 'kien/ctrlp.vim'
"Plugin 'rson/vim-conque'
"Plugin 'skwp/vim-ruby-conque'
Plugin 'jgdavey/tslime.vim'
"Plugin 'jgdavey/vim-turbux'
"Plugin 'vim-scripts/Tabbi'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'reedes/vim-one' " replacement for tvim/svim
"Plugin 'derekwyatt/vim-scala'
Plugin 'wincent/ferret'
Plugin 'ronakg/quickr-preview.vim'
Plugin 'mikelue/vim-maven-plugin'
Plugin 'janko-m/vim-test'
Plugin 'artnez/vim-wipeout'
Plugin 'majutsushi/tagbar' " a class outline viewer for Vim
Plugin 'gisraptor/vim-lilypond-integrator'
" }}}

" Colors {{{
Plugin 'flazz/vim-colorschemes'
" }}}

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'

" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'

" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'

" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'

" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Avoid a name conflict with L9
" Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
<%- end -%>

set ff=unix

set backupdir=~/tmp/vi,~/tmp,.
set directory=~/tmp/vi,~/tmp,.

set history=10000
"set noequalalways winheight=9999 helpheight=9999
"let netrw_winsize = 9999

set textwidth=132
set formatoptions=tcoql
set smarttab
set autoindent
set shiftround " round up broken indentation when shifting
set more
set nostartofline
set showmatch
set laststatus=2
set cmdheight=2
set switchbuf=usetab

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set backup		" keep a backup file
set ruler		" show the cursor position all the time
set number              " Show line numbers
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

syntax on

set nrformats-=octal
set encoding=utf-8    " Set default encoding to UTF-8

" Persistent undo
set undofile
set undodir=~/tmp/vi-undo

set undolevels=1000
set undoreload=10000

set tags=tags,../tags,../../tags

if exists('+macmeta')
  set macmeta
endif

" enable jumping to the end of ruby block with %
runtime macros/matchit.vim

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Do not remember position for git commit messages
"   " see :help last-position-jump
autocmd BufReadPost *
  \ if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

<%- unless @is_root -%>

"autocmd BufWritePre * :%s/\s\+$//e

" Usage:  :let ma = Mark() ... execute ma
" has the same effect as  :normal ma ... :normal 'a
" without affecting global marks.
" You can also use Mark(17) to refer to the start of line 17 and Mark(17,34)
" to refer to the 34'th (screen) column of the line 17.  The functions
" Line() and Virtcol() extract the line or (screen) column from a "mark"
" constructed from Mark() and default to line() and virtcol() if they do not
" recognize the pattern.
" Update:  :execute Mark() now restores screen position as well as the cursor.
fun! Mark(...)
  if a:0 == 0
    let mark = line(".") . "G" . virtcol(".") . "|"
    normal! H
    let mark = "normal!" . line(".") . "Gzt" . mark
    execute mark
    return mark
  elseif a:0 == 1
    return "normal!" . a:1 . "G1|"
  else
    return "normal!" . a:1 . "G" . a:2 . "|"
  endif
endfun

" Tries to return the buffer-specific value of a variable; if not
" found, tries to return the global value -- if that's not found
" either, returns an optional default value or -1 if not specified.
function! GetVar(...)
  let varName=a:1
  if (exists("a:2"))
    let retVal=a:2
  else
    let retVal=-1
  endif
  if (exists ("b:" . varName))
    exe "let retVal=b:" . varName
  elseif (exists ("g:" . varName))
    exe "let retVal=g:" . varName
  endif
  return retVal
endfunction

function! StripTrailingSpaces()
  if ( GetVar( "noStripSpaces" ) != 1 )
    let currPos=Mark()
    exec 'v:^--\s*$:s:\s\+$::e'
    exe currPos
  endif
endfunction

" Remove trailing blanks upon saving except from lines containing sigdashes
"au BufWritePre * silent! call StripTrailingSpaces()
autocmd BufWritePre * call StripTrailingSpaces()

" use "\f" for returning to edit previous file
map \f <C-^>

" ====== allowing to search for ruby or rails doc right from the VI
"let g:browser = 'firefox -new-tab '
let g:browser = 'open '
" Open the Ruby ApiDock page for the word under cursor, in a new Firefox tab
function! OpenRubyDoc(keyword)
  let url = 'http://apidock.com/ruby/'.a:keyword
  "exec '!'.g:browser.' '.url.' &'
  exec '!'.g:browser.' '.url
endfunction
noremap RB :call OpenRubyDoc(expand('<cword>'))<CR>

" Open the Rails ApiDock page for the word under cursos, in a new Firefox tab
function! OpenRailsDoc(keyword)
  let url = 'http://apidock.com/rails/'.a:keyword
  "exec '!'.g:browser.' '.url.' &'
  exec '!'.g:browser.' '.url
endfunction
noremap RR :call OpenRailsDoc(expand('<cword>'))<CR>

" clear search matching
noremap <leader><space> :noh<cr>:call clearmatches()<cr>

" ctrlp
let g:ctrlp_custom_ignore = '\v[\/](target|dist)|(\.(swp|ico|git|svn|jav|class))$'
" alt-ctrl-p searches is special folder for java dependencies, allows to navigate sources of third party packages efficiently
noremap <M-C-P> <Esc>:CtrlP ~/tmp/sdeps<CR>

" vim-indentobject
" let g:indentobject_meaningful_indentation = ["haml", "sass", "python", "yaml", "markdown"]

" Fugitive
" ,g for Ggrep
nmap <leader>g :Ggrep

" ,f for global git serach for word under the cursor (with highlight)
nmap <leader>f :let @/="\\<<C-R><C-W>\\>"<CR>:set hls<CR>:silent Ggrep -w "<C-R><C-W>"<CR>:ccl<CR>:cw<CR><CR>

" same in visual mode
:vmap <leader>f y:let @/=escape(@", '\\[]$^*.')<CR>:set hls<CR>:silent Ggrep -F "<C-R>=escape(@", '\\"#')<CR>"<CR>:ccl<CR>:cw<CR><CR>

" Cmd-Shift-R for RSpec
" nmap <silent> <D-R> :call RunRspecCurrentFileConque()<CR>
" Cmd-Shift-L for RSpec Current Line
" nmap <silent> <D-L> :call RunRspecCurrentLineConque()<CR>
" ,Cmd-R for Last conque command
" nmap <silent> <D-P> :call RunLastConqueCommand()<CR>

function! <SID>SetupMavenMap()
  doautocmd MavenAutoDetect BufNewFile,BufReadPost

  if !maven#isBufferUnderMavenProject(bufnr("%"))
    return
  endif

  nmap <buffer> <leader>us <Plug>MavenSwitchUnittestFile
  nmap <buffer> <leader>ura :TestSuite<CR>
  nmap <buffer> <leader>urf :TestFile<CR>
  nmap <buffer> <leader>urn :TestNearest<CR>
  nmap <buffer> <leader>url :TestLast<CR>
  nmap <buffer> <leader>urv :TestVisit<CR>
endfunction

let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

let g:maven_auto_chdir = 1
let g:maven_keymaps = 1

let g:test#strategy="tslime"
let g:test#preserve_screen = 1

autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces

autocmd FileType clojure setlocal lispwords+=ns,authorize,etaggable,GET,POST,PUT,DELETE,HEAD,ANY,context,with-meta,if-let,if-not,when-let,when-not,fn,loop,condp,dotrace,doseq,binding,catch,trace,testing,locking,proxy,reify,doto,use-fixtures,as->,fetch,while,go-loop

" TODO find out why setlocal did not work for next 2 lines
autocmd FileType java setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType xml setlocal expandtab shiftwidth=4 softtabstop=4
"autocmd FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

" Close quicklist after selecting an entry with ctrl-enter
autocmd FileType qf nnoremap <buffer> <C-CR> <CR>:cclose<CR>

autocmd BufNewFile,BufReadPost *.* call s:SetupMavenMap()

" Make Y yank everything from the cursor to the end of the line. This makes Y
" act more like C or D because by default, Y yanks the current line (i.e. the
" same as yy).
noremap Y y$

" ==============================================================================
" Inspired by Janus

" format the entire file, come back to same line, center
nmap <leader>fef mzggVG='zzz

<%- end -%>

" ==============================================================================
" ==============================================================================
" ==============================================================================

""
"" General Janus Mappings (Normal, Visual, Operator-pending)
""

" use :w!! to write to a file using sudo if you forgot to 'sudo vim file'
" (it will prompt for sudo password when writing)
cmap w!! %!sudo tee > /dev/null %

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" format the entire file
" nmap <leader>fef ggVG=

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

" cd to the directory containing the file in the buffer
nmap <silent> <leader>cd :lcd %:h<CR>

" Create the directory containing the file in the buffer
nmap <silent> <leader>md :!mkdir -p %:p:h<CR>

" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" Swap two words
nmap <silent> gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" Underline the current line with '='
nmap <silent> <leader>ul :t.\|s/./=/g\|:nohls<cr>

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Map the arrow keys to be based on display lines, not physical lines
" Olek - do not like that at all
" map <Down> gj
" map <Up> gk

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=

if has("gui_macvim") && has("gui_running")
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <D-]> >gv
  vmap <D-[> <gv

  nmap <D-]> >>
  nmap <D-[> <<

  omap <D-]> >>
  omap <D-[> <<

  imap <D-]> <Esc>>>i
  imap <D-[> <Esc><<i

  " Bubble single lines
  nmap <D-Up> [e
  nmap <D-Down> ]e
  nmap <D-k> [e
  nmap <D-j> ]e

  " Bubble multiple lines
  vmap <D-Up> [egv
  vmap <D-Down> ]egv
  vmap <D-k> [egv
  vmap <D-j> ]egv

  " Map Command-# to switch tabs
  map  <D-0> 0gt
  imap <D-0> <Esc>0gt
  map  <D-1> 1gt
  imap <D-1> <Esc>1gt
  map  <D-2> 2gt
  imap <D-2> <Esc>2gt
  map  <D-3> 3gt
  imap <D-3> <Esc>3gt
  map  <D-4> 4gt
  imap <D-4> <Esc>4gt
  map  <D-5> 5gt
  imap <D-5> <Esc>5gt
  map  <D-6> 6gt
  imap <D-6> <Esc>6gt
  map  <D-7> 7gt
  imap <D-7> <Esc>7gt
  map  <D-8> 8gt
  imap <D-8> <Esc>8gt
  map  <D-9> 9gt
  imap <D-9> <Esc>9gt
else
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <A-]> >gv
  vmap <A-[> <gv

  nmap <A-]> >>
  nmap <A-[> <<

  omap <A-]> >>
  omap <A-[> <<

  imap <A-]> <Esc>>>i
  imap <A-[> <Esc><<i

  " Bubble single lines
  nmap <C-Up> [e
  nmap <C-Down> ]e
  nmap <C-k> [e
  nmap <C-j> ]e

  " Bubble multiple lines
  vmap <C-Up> [egv
  vmap <C-Down> ]egv
  vmap <C-k> [egv
  vmap <C-j> ]egv

  " Make shift-insert work like in Xterm
  " Olek - insert key is disabled anyway
  " map <S-Insert> <MiddleMouse>
  " map! <S-Insert> <MiddleMouse>

  " Map Control-# to switch tabs
  " Olek - switched Ctrl to Alt
  map  <A-0> 0gt
  imap <A-0> <Esc>0gt
  map  <A-1> 1gt
  imap <A-1> <Esc>1gt
  map  <A-2> 2gt
  imap <A-2> <Esc>2gt
  map  <A-3> 3gt
  imap <A-3> <Esc>3gt
  map  <A-4> 4gt
  imap <A-4> <Esc>4gt
  map  <A-5> 5gt
  imap <A-5> <Esc>5gt
  map  <A-6> 6gt
  imap <A-6> <Esc>6gt
  map  <A-7> 7gt
  imap <A-7> <Esc>7gt
  map  <A-8> 8gt
  imap <A-8> <Esc>8gt
  map  <A-9> 9gt
  imap <A-9> <Esc>9gt
endif

""
"" Command-Line Mappings
""

" Insert the current directory into a command-line path
cmap <C-P> <C-R>=expand("%:p:h") . "/"<CR>


""
"" Janus Basic Setup
""

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
""
"" Searching
""

set hlsearch    " highlight matches
set incsearch   " incremental searching
"set ignorecase  " searches are case insensitive...
"set smartcase   " ... unless they contain at least one capital letter
