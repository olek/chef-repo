<%- unless @is_root -%>
function tc-mount {
  CMD_VAULT="$1"
  shift

  if [[ $CMD_VAULT == "" ]]; then
    echo "No vault name provided"
    return
  fi

  VAULT_FILENAME=$(basename "$CMD_VAULT")
  VAULT_EXT="${VAULT_FILENAME##*.}"
  VAULT="${VAULT_FILENAME%.*}"

  if [[ "${VAULT_EXT}" == "tc" ]]
  then
    VAULT_PATH="$CMD_VAULT"
  else
    VAULT_PATH=$HOME/vaults/$CMD_VAULT.tc
  fi

  if [ ! -f "$VAULT_PATH" ]; then
    echo "Vault $VAULT_PATH not found!"
    return
  fi

  MOUNT_PATH=/vaults/$VAULT

  if [ ! -d $MOUNT_PATH ]; then
    echo "Vault mount point $MOUNT_PATH not found, creating it!"
    sudo mkdir $MOUNT_PATH
  fi

  truecrypt \
    --text --keyfiles='' --fs-options="noatime,nodiratime,rw" --protect-hidden=no $@ \
    "$VAULT_PATH" /vaults/$VAULT
};

function tc-mount-usb {
  VAULT="usb"
  DEVICE="/dev/sdb"

  truecrypt \
    --text --keyfiles='' --fs-options="uid=$UID,umask=077" --protect-hidden=no $@ \
    $DEVICE /vaults/$VAULT || return

  MOUNT_PATH=/vaults/$VAULT

  if [ ! -d $MOUNT_PATH ]; then
    echo "Vault mount point $MOUNT_PATH not found, creating it!"
    sudo mkdir $MOUNT_PATH
  fi

  #truecrypt \
  #  --text --keyfiles='' --filesystem hfsplus --fs-options="uid=$UID,umask=077" --protect-hidden=no $@ \
  #  $DEVICE /vaults/$VAULT
  mount -t hfsplus -o rw $DEVICE /vaults/$VAULT
};

function tc-format {
  VAULT="$1"
  shift

  if [[ $VAULT == "" ]]; then
    echo "No vault name provided"
    return
  fi

  VAULT_PATH=$HOME/vaults/$VAULT.tc

  if [ ! -f $VAULT_PATH ]; then
    echo "Vault $VAULT_PATH not found!"
    return
  fi

  tc-mount $VAULT --text --filesystem=none || return
  DEVICE=`truecrypt --text --list | grep -e " $VAULT_PATH " | cut -d ' ' -f 3`
  if [[ ! $DEVICE =~ /dev/mapper/truecrypt[[:digit:]]+ ]]; then
    echo "bad device $DEVICE"
    return
  fi

  MOUNT_PATH=/vaults/$VAULT

  if [ ! -d $MOUNT_PATH ]; then
    echo "Vault mount point $MOUNT_PATH not found, creating it!"
    sudo mkdir $MOUNT_PATH
  fi

  user=$(id --user --name)
  group=$(id --group --name)


  LABEL=`echo $VAULT | sed 's/^.*/\u&/'`
  echo "vault: $VAULT.tc, label: $LABEL, device: $DEVICE"
  sudo bash -c "dd if=/dev/zero of=$DEVICE bs=1k count=100 && \
    mkfs.ext2 -T news -L $LABEL $DEVICE && \
    mount $DEVICE $MOUNT_PATH && \
    chown $user:$group $MOUNT_PATH && \
    chmod 700 $MOUNT_PATH \
  "
    #mkfs.hfsplus -U $UID -G users -M 700 -v $LABEL $DEVICE"
    #mkudffs --media-type=hd --utf8 --lvid $LABEL --vid $VAULT $DEVICE"
};

function tc-create {
  VAULT="$1"
  shift

  if [[ $VAULT == "" ]]; then
    echo "No vault name provided"
    return
  fi

  VAULT_PATH=$HOME/vaults/$VAULT.tc

  if [ -f $VAULT_PATH ]; then
    echo "Vault $VAULT_PATH already exists!"
    return
  fi

  SIZE="$1"
  shift

  if [[ $SIZE == "" ]]; then
    echo "No vault size provided"
    return
  fi

  let SIZE=$SIZE*1024*1024 # size is in MB

  echo "size: $SIZE"

  truecrypt --text \
  --create \
  --keyfiles="" \
  --volume-type=normal \
  --size=${SIZE} \
  --encryption=AES \
  --hash=RIPEMD-160 \
  --filesystem=none \
  --random-source=/dev/random \
  $VAULT_PATH
};

function tc-umount {
  CMD_VAULT="$1"
  shift

  if [[ $CMD_VAULT == "" ]]; then
    echo "unmounting all truecrypt vaults"
    truecrypt --text --dismount
  else
    VAULT_FILENAME=$(basename "$CMD_VAULT")
    VAULT_EXT="${VAULT_FILENAME##*.}"
    VAULT="${VAULT_FILENAME%.*}"

    if [[ "${VAULT_EXT}" == "tc" ]]
    then
      VAULT_PATH="$CMD_VAULT"
    else
      VAULT_PATH=$HOME/vaults/$CMD_VAULT.tc
    fi

    if [ ! -f "$VAULT_PATH" ]; then
      echo "Vault $VAULT_PATH not found!"
      return
    fi

    # echo "unmounting truecrypt vault '$VAULT'"
    truecrypt --text --dismount "$VAULT_PATH"
  fi
};

function tc-list { truecrypt --text --list; };

function remount-usb { eject /dev/sdb; sleep 1; eject -t /dev/sdb; };

function js-beautify-in-place {
  if [[ $1 == "" ]]; then
    echo "Usage: js-beautify-in-place file1.js file2.js"
  else
    for i in $@; do
      echo $i
      cat $i | js-beautify -i -s2 -j -o $i
    done;
  fi
};

file_excludes='--exclude=\*\\\.log --exclude=\*\\\.class --exclude=\*\\\.jar'
dir_excludes='--exclude-dir=target'
grep-src() { fgrep --color=auto "$1" * -r $2 $3 $4 -I $file_excludes $dir_excludes; }
grep-java() { fgrep --color=auto "$1" * -r $2 $3 $4 --include=\*\\\.java $dir_excludes; }
grep-xml() { fgrep --color=auto "$1" * -r $2 $3 $4 --include=\*\\\.xml $dir_excludes; }
grep-sql() { fgrep --color=auto "$1" * -r $2 $3 $4 --include=\*\\\.\*sql  $dir_excludes; }
grep-ext() { fgrep --color=auto "$2" * -r $3 $4 $5 --include=\*\\\.$1 $dir_excludes; }

global-grep() { global -xr "$1" | gawk -v ctx=${2:-1} '{printf "echo; echo %3$s; nl -ba -nln %3$s | grep -C%4$s \"^%2$s .*\" | grep -C%4$s --color=auto \"%1$s\\|^%2$s\"\n",$1,$2,$3,ctx}' | sh ; }
<%- end -%>

short_dir ()
{
    if [ "$PWD" = "$HOME" ]; then
        echo '~'
    else
        the_dir=`dirname "$PWD"`;
        the_base=`basename "$PWD"`;
        the_dir_base=`basename "$the_dir"`;
        if [ "$the_dir_base" = '/' ]; then
            the_dir_base="";
        fi
        echo "$the_dir_base/$the_base"
    fi

}

function __bundler_ps1 {
  if [ -n "${BUNDLE_GEMFILE-}" ]; then
    project_path="${BUNDLE_GEMFILE%/Gemfile}"
    project_name="${project_path##**/}"

    if [ -n "${1-}" ]; then
      printf "$1" "in ${project_name} bundle"
    else
      printf " (%s)" "in ${project_name} bundle"
    fi
  fi
}

# usage: $repeat 15 echo 'foo'
function repeat {
    n=0
    times=$1
    shift
    while [[ $n -lt $times ]]; do
        $@
        n=$((n+1))
    done
}

function prepend_to_path {
    path_list=`echo $PATH | tr ':' ' '`
    new_dir=$1
    for d in $path_list
    do
    	if [ $d == $new_dir ]
    	then
    		return 0
    	fi
    done

    if [ -d "$new_dir" ] ; then
        export PATH="$new_dir:$PATH"
    fi
}

function append_to_path {
    path_list=`echo $PATH | tr ':' ' '`
    new_dir=$1
    for d in $path_list
    do
    	if [ $d == $new_dir ]
    	then
    		return 0
    	fi
    done

    if [ -d "$new_dir" ] ; then
        export PATH="$PATH:$new_dir"
    fi
}
