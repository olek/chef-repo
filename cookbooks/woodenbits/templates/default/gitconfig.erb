[user]
  email = <%= @email %>
  name = <%= @name %>
[core]
  excludesfile = "/home/<%= @username %>/.gitignore"
	pager = less -r
[color]
  status = auto
  diff = auto
  branch = auto
[alias]
  st = status
  co = checkout
  ci = commit
  br = branch
  cp = cherry-pick
  dt = difftool
  mt = mergetool
  rso = remote show origin
  ll = log --pretty=format:'%Cred%h %Cblue%an %Cgreen%s / %Cblue%ar%Creset' --abbrev-commit -n15
  pp = !git down && git push
  pull-ff = pull --ff-only

  down = !sh -c 'CURRENT=$(git symbolic-ref HEAD | sed -e s@.*/@@) \
      && (git pull --ff-only || (git fetch origin && git rebase --preserve-merges origin/$CURRENT))'

  bugfix-startpoint = "!f() { if [ $# -lt 2 ]; then echo 'usage: git bugfix-startpoint <branch> <branch> ...' >&2; exit 1; fi; git merge-base --octopus --all $@;  }; f"

  publish = "!f() { if [ $# -ne 1 ]; then echo 'usage: git publish <local-branch-name>' >&2; exit 1; fi; git push --set-upstream origin $1:$1; }; f"
  unpublish = "!f() { if [ $# -ne 1 ]; then echo 'usage: git unpublish <remote-branch-name>' >&2; exit 1; fi; git push origin :$1; }; f"

  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; gvim `f`"
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

[diff]
  tool = diffmerge
[merge]
  tool = diffmerge
[difftool "diffmerge"]
  cmd = diffmerge $LOCAL $REMOTE
[mergetool "diffmerge"]
  cmd = diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE
[mergetool]
  keepBackup = false
[branch]
  autosetuprebase = never
[remote "origin"]
  push = HEAD
